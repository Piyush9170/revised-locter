#include<bits/stdc++.h>
using namespace std;
const int MAX = 1e4 + 5;
vector<pair<long long,int>> adj[MAX];
bool marked[100];



int prim(int x)
{
    priority_queue<int,vector<pair<long long,int>>,greater <pair<long long,int>>>q;
    q.push({0,x});
   long long minimumCost=0;
   pair<long long,int> p;
   int y;
   while(!q.empty())
   {
       p=q.top();
       q.pop();
       x=p.second;
       if(marked[x]==true)
            continue;
        cout<<p.first<<" "<<p.second<<endl;
        minimumCost+=p.first;
       marked[x]=true;     
       for(int i=0;i<adj[x].size();i++)
       {
          if(!marked[adj[x][i].second])
          {
              q.push(adj[x][i]);
          }
       }      
   }
   return minimumCost;   
}
int main()
{
  int nodes, edges, x, y;
    long long weight, minimumCost;
    cin >> nodes >> edges;
    for(int i = 0;i < edges;++i)
    {
        cin >> x >> y >> weight;
        adj[x].push_back(make_pair(weight, y));
        adj[y].push_back(make_pair(weight, x));
    }
    // Selecting 1 as the starting node
    minimumCost = prim(1);
    cout << minimumCost << endl;
    return 0;
}
