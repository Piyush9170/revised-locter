#include<bits/stdc++.h>
using namespace std;
vector<pair<int,int>> v[9];
int dist[9];
bool visited[9];
void dijkstra(int src)
{ 
memset(visited,false,sizeof(visited));
int i;
dist[src] = 0;
for(i=1;i<9;i++)
{
    dist[i]=2e9;
}
multiset<pair<int,int>> s;
s.insert({0,src});
while(!s.empty())
{ 
    pair<int,int> p=*s.begin();
    s.erase(s.begin());
    int wei=p.first;
    int x=p.second;
    if(visited[x])
      continue;
    visited[x]=true;
    for(int i = 0; i < v[x].size(); i++){
            int e = v[x][i].first; int w = v[x][i].second;
            if(dist[x] + w < dist[e]  ){            // check if the next vertex distance could be minimized
                dist[e] = dist[x] + w;
                s.insert({dist[e],  e} );           // insert the next vertex with the updated distance
            }  
}
}
for(i=0;i<9;i++)
{ 
    cout<<i<<" "<<dist[i]<<endl;
}
}
int main()
{
    int graph[9][9] = { { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
                        { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
                        { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
                        { 0, 0, 7, 0, 9, 14, 0, 0, 0 },
                        { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
                        { 0, 0, 4, 14, 10, 0, 2, 0, 0 },
                        { 0, 0, 0, 0, 0, 2, 0, 1, 6 },
                        { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
                        { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
  for(int i=0;i<9;i++)
  { 
      for(int j=0;j<9;j++)
      {
          if(graph[i][j]!=0)
          { 
            v[i].push_back({j,graph[i][j]});
          }
       }
  }
    dijkstra(0);
  
    return 0;
}
