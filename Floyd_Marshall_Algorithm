#include<bits/stdc++.h>
using namespace std;
#define V 4;

void floydWarshall(int graph[][4])
{ 
int i,j,k;
int dist[4][4];
for(i=0;i<4;i++)
    {
    for(j=0;j<4;j++)
    { 
           dist[i][j] =graph[i][j];
    }
}
for(k=0;k<4;k++)
{ 
    for(i=0;i<4;i++)
    {
    for(j=0;j<4;j++)
    { 
           if(dist[i][j]>(dist[i][k]+dist[k][j]))
           { 
               dist[i][j] = dist[i][k]+dist[k][j];
           }
    }
}
}
cout<<"The following matrix shows the shortest distances between every pair of vertices \n";
    for (i = 0; i <4; i++) {
        for (j = 0; j<4; j++) {
            if (dist[i][j]==9999)
                cout << "INF"<< "     ";
            else
                cout<<dist[i][j] << "     ";
        }
        cout<<endl;
    
}
}

int main()
{
    /* Let us create the following weighted graph
            10
    (0)------->(3)
        |     /|\
    5 |     |
        |     | 1
    \|/     |
    (1)------->(2)
            3     */
    int graph[4][4] = { { 0, 5, 9999, 10 },
                        { 9999, 0, 3, 9999 },
                        { 9999, 9999, 0, 1 },
                        { 9999, 9999, 9999, 0 } };
 
    // Print the solution
    floydWarshall(graph);
    return 0;
}
